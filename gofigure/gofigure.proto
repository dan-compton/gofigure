
syntax = "proto3";

import "github.com/golang/protobuf/ptypes/struct/struct.proto";


package gofigure;

message ConfigVersion {
    string id = 1;
    int64 timestamp = 2;
}


message ProtoConfig {
    google.protobuf.Struct data = 1;
}

message YamlConfig {
    bytes raw_data = 1;
}

// Map of Values that represents configuration data for a service
// version specifies version bucket wherein configuration is stored
message Config {
    ConfigVersion version = 1;
    oneof a_config {
        ProtoConfig proto = 2;
        YamlConfig yaml = 3;
    }
}

// GRPC request to check service configuration
message CheckConfigRequest {
    string service_name = 1;
    ConfigVersion version = 2;
}

// Used by the client to check its configuration status
message CheckConfigResponse {
    enum CheckConfigStatus {
        SUCCESS = 0;
        ERR_INVALID_SERVICE = 1;
        ERR_INVALID_CONFIG = 2;
        ERR_UNSPECIFIED = 3;
   }
    CheckConfigStatus status = 1; 
    ConfigVersion version = 2;
}

// Store a new configuration on behalf of a service
message NewConfigRequest {
    string service_name = 1;
    Config configuration = 2;
}

// Response for new service request
message NewConfigResponse {
    enum NewConfigStatus {
        SUCCESS = 0;
        ERR_INVALID_SERVICE = 1;
        ERR_INVALID_CONFIG = 2;
        ERR_UNSPECIFIED = 3;
    }
    NewConfigStatus status = 1; 
}

// Returns config given service name and optional version
message GetConfigRequest {
    string service_name = 1;
    ConfigVersion version = 2;
}

// Response for get service request
message GetConfigResponse {
    enum GetConfigStatus {
        SUCCESS = 0;
        ERR_INVALID_SERVICE = 1;
        ERR_INVALID_CONFIG = 2;
        ERR_UNSPECIFIED = 3;
   }

    GetConfigStatus status = 1; 
    Config configuration = 2;
}

// Store new service configuration in service
message UpdateConfigRequest {
    string service_name = 1;
    Config configuration = 2;
}

//  Response for update config request
message UpdateConfigResponse {
    enum UpdateConfigStatus {
        SUCCESS = 0;
        ERR_INVALID_SERVICE = 1;
        ERR_INVALID_CONFIG = 2;
        ERR_UNSPECIFIED = 3;
    }
    UpdateConfigStatus status = 1; 
}

// Service which provides versioned storage of service configurations in boltdb for dynamic service reconfiguration
service GoFigurator {
    rpc NewConfig (NewConfigRequest) returns (NewConfigResponse) {}
    rpc GetConfig (GetConfigRequest) returns (GetConfigResponse) {}
    rpc UpdateConfig (UpdateConfigRequest) returns (UpdateConfigResponse) {}
    rpc CheckConfig (CheckConfigRequest) returns (CheckConfigResponse) {}
}
