// Code generated by protoc-gen-go.
// source: gofigure.proto
// DO NOT EDIT!

/*
Package gofigure is a generated protocol buffer package.

It is generated from these files:
	gofigure.proto

It has these top-level messages:
	ConfigVersion
	Config
	ConfigCheckRequest
	ConfigCheckResponse
	NewConfigRequest
	NewConfigResponse
	GetConfigRequest
	GetConfigResponse
	UpdateConfigRequest
	UpdateConfigResponse
*/
package gofigure

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConfigCheckResponse_ConfigCheckStatus int32

const (
	ConfigCheckResponse_SUCCESS         ConfigCheckResponse_ConfigCheckStatus = 0
	ConfigCheckResponse_ERRDOESNOTEXIST ConfigCheckResponse_ConfigCheckStatus = 1
	ConfigCheckResponse_ERRUNSPECIFIED  ConfigCheckResponse_ConfigCheckStatus = 2
)

var ConfigCheckResponse_ConfigCheckStatus_name = map[int32]string{
	0: "SUCCESS",
	1: "ERRDOESNOTEXIST",
	2: "ERRUNSPECIFIED",
}
var ConfigCheckResponse_ConfigCheckStatus_value = map[string]int32{
	"SUCCESS":         0,
	"ERRDOESNOTEXIST": 1,
	"ERRUNSPECIFIED":  2,
}

func (x ConfigCheckResponse_ConfigCheckStatus) String() string {
	return proto.EnumName(ConfigCheckResponse_ConfigCheckStatus_name, int32(x))
}
func (ConfigCheckResponse_ConfigCheckStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

type NewConfigResponse_NewConfigStatus int32

const (
	NewConfigResponse_SUCCESS        NewConfigResponse_NewConfigStatus = 0
	NewConfigResponse_ERREXISTS      NewConfigResponse_NewConfigStatus = 1
	NewConfigResponse_ERRUNSPECIFIED NewConfigResponse_NewConfigStatus = 2
)

var NewConfigResponse_NewConfigStatus_name = map[int32]string{
	0: "SUCCESS",
	1: "ERREXISTS",
	2: "ERRUNSPECIFIED",
}
var NewConfigResponse_NewConfigStatus_value = map[string]int32{
	"SUCCESS":        0,
	"ERREXISTS":      1,
	"ERRUNSPECIFIED": 2,
}

func (x NewConfigResponse_NewConfigStatus) String() string {
	return proto.EnumName(NewConfigResponse_NewConfigStatus_name, int32(x))
}
func (NewConfigResponse_NewConfigStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type GetConfigResponse_GetConfigStatus int32

const (
	GetConfigResponse_SUCCESS        GetConfigResponse_GetConfigStatus = 0
	GetConfigResponse_ERRINVALID     GetConfigResponse_GetConfigStatus = 1
	GetConfigResponse_ERRUNSPECIFIED GetConfigResponse_GetConfigStatus = 2
)

var GetConfigResponse_GetConfigStatus_name = map[int32]string{
	0: "SUCCESS",
	1: "ERRINVALID",
	2: "ERRUNSPECIFIED",
}
var GetConfigResponse_GetConfigStatus_value = map[string]int32{
	"SUCCESS":        0,
	"ERRINVALID":     1,
	"ERRUNSPECIFIED": 2,
}

func (x GetConfigResponse_GetConfigStatus) String() string {
	return proto.EnumName(GetConfigResponse_GetConfigStatus_name, int32(x))
}
func (GetConfigResponse_GetConfigStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0}
}

type UpdateConfigResponse_UpdateConfigStatus int32

const (
	UpdateConfigResponse_SUCCESS        UpdateConfigResponse_UpdateConfigStatus = 0
	UpdateConfigResponse_ERRINVALID     UpdateConfigResponse_UpdateConfigStatus = 1
	UpdateConfigResponse_ERRUNSPECIFIED UpdateConfigResponse_UpdateConfigStatus = 2
)

var UpdateConfigResponse_UpdateConfigStatus_name = map[int32]string{
	0: "SUCCESS",
	1: "ERRINVALID",
	2: "ERRUNSPECIFIED",
}
var UpdateConfigResponse_UpdateConfigStatus_value = map[string]int32{
	"SUCCESS":        0,
	"ERRINVALID":     1,
	"ERRUNSPECIFIED": 2,
}

func (x UpdateConfigResponse_UpdateConfigStatus) String() string {
	return proto.EnumName(UpdateConfigResponse_UpdateConfigStatus_name, int32(x))
}
func (UpdateConfigResponse_UpdateConfigStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 0}
}

type ConfigVersion struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ConfigVersion) Reset()                    { *m = ConfigVersion{} }
func (m *ConfigVersion) String() string            { return proto.CompactTextString(m) }
func (*ConfigVersion) ProtoMessage()               {}
func (*ConfigVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Map of Values that represents configuration data for a service
// version specifies version bucket wherein configuration is stored
type Config struct {
	Version       *ConfigVersion          `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Configuration *google_protobuf.Struct `protobuf:"bytes,2,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Config) GetVersion() *ConfigVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Config) GetConfiguration() *google_protobuf.Struct {
	if m != nil {
		return m.Configuration
	}
	return nil
}

// GRPC request to check service configuration
type ConfigCheckRequest struct {
	ServiceName string         `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	Version     *ConfigVersion `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *ConfigCheckRequest) Reset()                    { *m = ConfigCheckRequest{} }
func (m *ConfigCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigCheckRequest) ProtoMessage()               {}
func (*ConfigCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConfigCheckRequest) GetVersion() *ConfigVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Used by the client to check its configuration status
type ConfigCheckResponse struct {
	Status  ConfigCheckResponse_ConfigCheckStatus `protobuf:"varint,1,opt,name=status,enum=gofigure.ConfigCheckResponse_ConfigCheckStatus" json:"status,omitempty"`
	Version *ConfigVersion                        `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *ConfigCheckResponse) Reset()                    { *m = ConfigCheckResponse{} }
func (m *ConfigCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigCheckResponse) ProtoMessage()               {}
func (*ConfigCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConfigCheckResponse) GetVersion() *ConfigVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Store a new configuration on behalf of a service
type NewConfigRequest struct {
	ServiceName   string  `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	Configuration *Config `protobuf:"bytes,2,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *NewConfigRequest) Reset()                    { *m = NewConfigRequest{} }
func (m *NewConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*NewConfigRequest) ProtoMessage()               {}
func (*NewConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NewConfigRequest) GetConfiguration() *Config {
	if m != nil {
		return m.Configuration
	}
	return nil
}

// Response for new service request
type NewConfigResponse struct {
	Status NewConfigResponse_NewConfigStatus `protobuf:"varint,1,opt,name=status,enum=gofigure.NewConfigResponse_NewConfigStatus" json:"status,omitempty"`
}

func (m *NewConfigResponse) Reset()                    { *m = NewConfigResponse{} }
func (m *NewConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*NewConfigResponse) ProtoMessage()               {}
func (*NewConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// Returns config given service name and optional version
type GetConfigRequest struct {
	ServiceName string         `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	Version     *ConfigVersion `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *GetConfigRequest) Reset()                    { *m = GetConfigRequest{} }
func (m *GetConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConfigRequest) ProtoMessage()               {}
func (*GetConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetConfigRequest) GetVersion() *ConfigVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// Response for get service request
type GetConfigResponse struct {
	Status        GetConfigResponse_GetConfigStatus `protobuf:"varint,1,opt,name=status,enum=gofigure.GetConfigResponse_GetConfigStatus" json:"status,omitempty"`
	Configuration *Config                           `protobuf:"bytes,2,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *GetConfigResponse) Reset()                    { *m = GetConfigResponse{} }
func (m *GetConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConfigResponse) ProtoMessage()               {}
func (*GetConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetConfigResponse) GetConfiguration() *Config {
	if m != nil {
		return m.Configuration
	}
	return nil
}

// Store new service configuration in service/(version+1)
type UpdateConfigRequest struct {
	ServiceName   string  `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	Configuration *Config `protobuf:"bytes,2,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *UpdateConfigRequest) Reset()                    { *m = UpdateConfigRequest{} }
func (m *UpdateConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigRequest) ProtoMessage()               {}
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateConfigRequest) GetConfiguration() *Config {
	if m != nil {
		return m.Configuration
	}
	return nil
}

//  Response for update config request
type UpdateConfigResponse struct {
	Status UpdateConfigResponse_UpdateConfigStatus `protobuf:"varint,1,opt,name=status,enum=gofigure.UpdateConfigResponse_UpdateConfigStatus" json:"status,omitempty"`
}

func (m *UpdateConfigResponse) Reset()                    { *m = UpdateConfigResponse{} }
func (m *UpdateConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigResponse) ProtoMessage()               {}
func (*UpdateConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*ConfigVersion)(nil), "gofigure.ConfigVersion")
	proto.RegisterType((*Config)(nil), "gofigure.Config")
	proto.RegisterType((*ConfigCheckRequest)(nil), "gofigure.ConfigCheckRequest")
	proto.RegisterType((*ConfigCheckResponse)(nil), "gofigure.ConfigCheckResponse")
	proto.RegisterType((*NewConfigRequest)(nil), "gofigure.NewConfigRequest")
	proto.RegisterType((*NewConfigResponse)(nil), "gofigure.NewConfigResponse")
	proto.RegisterType((*GetConfigRequest)(nil), "gofigure.GetConfigRequest")
	proto.RegisterType((*GetConfigResponse)(nil), "gofigure.GetConfigResponse")
	proto.RegisterType((*UpdateConfigRequest)(nil), "gofigure.UpdateConfigRequest")
	proto.RegisterType((*UpdateConfigResponse)(nil), "gofigure.UpdateConfigResponse")
	proto.RegisterEnum("gofigure.ConfigCheckResponse_ConfigCheckStatus", ConfigCheckResponse_ConfigCheckStatus_name, ConfigCheckResponse_ConfigCheckStatus_value)
	proto.RegisterEnum("gofigure.NewConfigResponse_NewConfigStatus", NewConfigResponse_NewConfigStatus_name, NewConfigResponse_NewConfigStatus_value)
	proto.RegisterEnum("gofigure.GetConfigResponse_GetConfigStatus", GetConfigResponse_GetConfigStatus_name, GetConfigResponse_GetConfigStatus_value)
	proto.RegisterEnum("gofigure.UpdateConfigResponse_UpdateConfigStatus", UpdateConfigResponse_UpdateConfigStatus_name, UpdateConfigResponse_UpdateConfigStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for GoFigurator service

type GoFiguratorClient interface {
	NewConfig(ctx context.Context, in *NewConfigRequest, opts ...grpc.CallOption) (*NewConfigResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	ConfigCheck(ctx context.Context, in *ConfigCheckRequest, opts ...grpc.CallOption) (*ConfigCheckResponse, error)
}

type goFiguratorClient struct {
	cc *grpc.ClientConn
}

func NewGoFiguratorClient(cc *grpc.ClientConn) GoFiguratorClient {
	return &goFiguratorClient{cc}
}

func (c *goFiguratorClient) NewConfig(ctx context.Context, in *NewConfigRequest, opts ...grpc.CallOption) (*NewConfigResponse, error) {
	out := new(NewConfigResponse)
	err := grpc.Invoke(ctx, "/gofigure.GoFigurator/NewConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFiguratorClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := grpc.Invoke(ctx, "/gofigure.GoFigurator/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFiguratorClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	out := new(UpdateConfigResponse)
	err := grpc.Invoke(ctx, "/gofigure.GoFigurator/UpdateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goFiguratorClient) ConfigCheck(ctx context.Context, in *ConfigCheckRequest, opts ...grpc.CallOption) (*ConfigCheckResponse, error) {
	out := new(ConfigCheckResponse)
	err := grpc.Invoke(ctx, "/gofigure.GoFigurator/ConfigCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoFigurator service

type GoFiguratorServer interface {
	NewConfig(context.Context, *NewConfigRequest) (*NewConfigResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	ConfigCheck(context.Context, *ConfigCheckRequest) (*ConfigCheckResponse, error)
}

func RegisterGoFiguratorServer(s *grpc.Server, srv GoFiguratorServer) {
	s.RegisterService(&_GoFigurator_serviceDesc, srv)
}

func _GoFigurator_NewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFiguratorServer).NewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.GoFigurator/NewConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFiguratorServer).NewConfig(ctx, req.(*NewConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFigurator_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFiguratorServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.GoFigurator/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFiguratorServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFigurator_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFiguratorServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.GoFigurator/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFiguratorServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoFigurator_ConfigCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoFiguratorServer).ConfigCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofigure.GoFigurator/ConfigCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoFiguratorServer).ConfigCheck(ctx, req.(*ConfigCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoFigurator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gofigure.GoFigurator",
	HandlerType: (*GoFiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewConfig",
			Handler:    _GoFigurator_NewConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _GoFigurator_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _GoFigurator_UpdateConfig_Handler,
		},
		{
			MethodName: "ConfigCheck",
			Handler:    _GoFigurator_ConfigCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x95, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0x63, 0x7f, 0x52, 0xfa, 0x65, 0xd2, 0x26, 0xee, 0x06, 0x89, 0x2a, 0xb4, 0x08, 0x7c,
	0x42, 0x42, 0x8a, 0xd5, 0x20, 0xb8, 0x71, 0x28, 0x8e, 0x13, 0x59, 0xaa, 0x1c, 0x64, 0x37, 0x15,
	0x37, 0xe4, 0xb8, 0x5b, 0xc7, 0x50, 0x7b, 0x8d, 0xbd, 0x2e, 0x82, 0x57, 0xe1, 0x05, 0x78, 0x08,
	0x1e, 0x83, 0x23, 0x0f, 0xc3, 0xd6, 0x76, 0x63, 0x7b, 0x9d, 0x04, 0x92, 0x03, 0xa7, 0x36, 0xb3,
	0x33, 0xff, 0xf9, 0xef, 0x6f, 0x26, 0x1b, 0xe8, 0xb8, 0xe4, 0xda, 0x73, 0x93, 0x08, 0x0f, 0xc2,
	0x88, 0x50, 0x82, 0xfe, 0xbf, 0xff, 0xdc, 0x7f, 0xe9, 0x7a, 0x74, 0x91, 0xcc, 0x07, 0x0e, 0xf1,
	0x15, 0x97, 0xdc, 0xd8, 0x81, 0xab, 0xa4, 0x29, 0xf3, 0xe4, 0x5a, 0x09, 0xe9, 0x97, 0x10, 0xc7,
	0x4a, 0x4c, 0xa3, 0xc4, 0xa1, 0xf9, 0x9f, 0x4c, 0x40, 0x7e, 0x0d, 0x07, 0x2a, 0x09, 0x98, 0xc6,
	0x25, 0x8e, 0x62, 0x8f, 0x04, 0xa8, 0x03, 0xa2, 0x77, 0x75, 0x24, 0x3c, 0x11, 0x9e, 0xb5, 0x4c,
	0xf6, 0x1f, 0x3a, 0x86, 0x16, 0xf5, 0x7c, 0x1c, 0x53, 0xdb, 0x0f, 0x8f, 0x44, 0x16, 0xfe, 0xcf,
	0x2c, 0x02, 0xf2, 0x57, 0x68, 0x66, 0xe5, 0xe8, 0x14, 0xf6, 0x6e, 0x33, 0x89, 0xb4, 0xb8, 0x3d,
	0x7c, 0x38, 0x58, 0x7a, 0xad, 0x74, 0x30, 0xef, 0xf3, 0x10, 0xeb, 0xed, 0xa4, 0x27, 0x49, 0x64,
	0xd3, 0xbb, 0x42, 0x71, 0x59, 0x48, 0xdc, 0x9b, 0xfc, 0x8a, 0xcc, 0xff, 0xc0, 0x4a, 0x1d, 0x9b,
	0xd5, 0x6c, 0xf9, 0x03, 0xa0, 0x4c, 0x58, 0x5d, 0x60, 0xe7, 0xa3, 0x89, 0x3f, 0x25, 0xcc, 0x14,
	0x7a, 0x0a, 0xfb, 0x31, 0x8e, 0x6e, 0x3d, 0x07, 0xbf, 0x0f, 0x6c, 0x1f, 0xe7, 0x37, 0x69, 0xe7,
	0x31, 0x83, 0x85, 0xca, 0x56, 0xc5, 0xbf, 0xb3, 0x2a, 0xff, 0x12, 0xa0, 0x57, 0x69, 0x16, 0x87,
	0x24, 0x88, 0x31, 0x9a, 0x40, 0x93, 0x81, 0xa0, 0x49, 0x9c, 0xf6, 0xe9, 0x0c, 0x15, 0x5e, 0xa9,
	0x92, 0x5e, 0x8e, 0x59, 0x69, 0x99, 0x99, 0x97, 0xef, 0xe2, 0x49, 0x87, 0xc3, 0x9a, 0x1e, 0x6a,
	0xc3, 0x9e, 0x35, 0x53, 0x55, 0xcd, 0xb2, 0xa4, 0x06, 0xea, 0x41, 0x57, 0x33, 0xcd, 0xd1, 0x54,
	0xb3, 0x8c, 0xe9, 0x85, 0xf6, 0x4e, 0xb7, 0x2e, 0x24, 0x01, 0x21, 0xe8, 0xb0, 0xe0, 0xcc, 0xb0,
	0xde, 0x6a, 0xaa, 0x3e, 0xd6, 0xb5, 0x91, 0x24, 0xca, 0x3e, 0x48, 0x06, 0xfe, 0x9c, 0xa9, 0x6d,
	0x01, 0xf2, 0xd5, 0xea, 0x01, 0x4a, 0xbc, 0x75, 0x7e, 0x72, 0xdf, 0x04, 0x38, 0x2c, 0xf5, 0xcb,
	0x59, 0xaa, 0x1c, 0xcb, 0xe7, 0x85, 0x4c, 0x2d, 0xb9, 0x88, 0x54, 0x39, 0xca, 0x67, 0xd0, 0xe5,
	0x8e, 0xaa, 0x48, 0x0e, 0xa0, 0xc5, 0x6e, 0x9f, 0xb2, 0xb0, 0xd6, 0xc0, 0x58, 0x80, 0x34, 0xc1,
	0x74, 0x6b, 0x18, 0x3b, 0x4c, 0xf0, 0x27, 0xe3, 0x50, 0x6a, 0xf5, 0x67, 0x0e, 0xb5, 0xe4, 0x22,
	0xc2, 0xed, 0xd3, 0xae, 0xa3, 0x79, 0x03, 0x5d, 0x4e, 0xb2, 0xca, 0xaf, 0x03, 0xc0, 0x80, 0xe9,
	0xc6, 0xe5, 0xd9, 0xb9, 0x3e, 0x5a, 0x03, 0x30, 0x84, 0xde, 0x2c, 0xbc, 0xb2, 0x29, 0xfe, 0x67,
	0x0b, 0xf5, 0x5d, 0x80, 0x07, 0xd5, 0x96, 0x39, 0x4b, 0x9d, 0x63, 0x79, 0x5a, 0x28, 0xad, 0xca,
	0xaf, 0x04, 0xb9, 0xcd, 0xd2, 0x00, 0xd5, 0x4f, 0xb7, 0x86, 0x33, 0xfc, 0x21, 0x42, 0x7b, 0x42,
	0xc6, 0x99, 0x77, 0x12, 0xa1, 0x31, 0xb4, 0x96, 0x0b, 0x8b, 0xfa, 0x2b, 0x57, 0x3e, 0xc5, 0xd7,
	0x7f, 0xb4, 0xe1, 0xeb, 0x20, 0x37, 0xee, 0x74, 0x96, 0x83, 0x2b, 0xeb, 0xf0, 0xab, 0x5c, 0xd6,
	0xa9, 0xad, 0x13, 0xd3, 0x99, 0xc2, 0x7e, 0xf9, 0x9a, 0xe8, 0x64, 0x1d, 0xb1, 0x4c, 0xed, 0xf1,
	0x66, 0xa0, 0x4c, 0xf0, 0x1c, 0xda, 0xa5, 0x67, 0x0a, 0x1d, 0xaf, 0x79, 0x21, 0x33, 0xb9, 0x93,
	0x8d, 0xef, 0xa7, 0xdc, 0x98, 0x37, 0xd3, 0x1f, 0x85, 0x17, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x3b, 0xd7, 0x4c, 0x7f, 0x09, 0x07, 0x00, 0x00,
}
